require "project_euler"

def fibonacci(up_to=1000, &block)
  old = 1
  new = 1
  loop do
    break unless old + new < up_to
    yield old + new
    old, new = new, old + new
  end
end

def find_fibonacci(up_to=1000)
  fibs = []
  fibonacci(up_to) { |fib| fibs << fib }
  fibs
end

class Array
  def sum
    self.inject { |sum, n| sum + n }
  end
end

problem = Euler::Problem.new(2, <<DESCRIPTION
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed four million.
DESCRIPTION
)

problem.solve do
  fibs = find_fibonacci(4000000)
  even_fibs = fibs.find_all { |fib| fib % 2 == 0 }
  even_fibs.sum
end
